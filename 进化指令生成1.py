# -*- encoding:utf-8 -*-

from ExtractContext import extractcontext
from GenerateQueryContext import generatequerycontext
from Internet_research import internet_research
from support_001 import generate
from 筛选数据module import filterdata


with open('filter1.txt', 'r', encoding='utf-8') as f:
    sensitive_words1 = [line.strip() for line in f.readlines()]
with open('filter2.txt', 'r', encoding='utf-8') as f:
    sensitive_words2 = [line.strip() for line in f.readlines()]

import random
import json
from tqdm import tqdm

filename = "jin.json"
#filename = "xiaoyu_person_指令2.json"
translations = []
total_lines = 15000
sum_str = ""
import random

# Dictionary with different constraints and requirements
requirements = {
    1: "转变常规的要求，赋予其独特而极具特色的诉求，使之呈现与众不同的需求。",
    2: "深入思考问题，引入更多复杂的逻辑推演步骤，从而策发更为探究性的问题情境。",
    3: "引入更为复杂的时间和空间元素，带来挑战性更高的问题生成过程，考验推问题的深度与广度。",
    4: "以多个不同的视角和角度，以多维度思维方式，创造问题，使其呈现丰富多彩的思维层面。",
    5: "将不同领域的知识融汇贯通，借助交叉学科的方式，将问题生成与多元领域的智识相融合。",
    6: "挑战传统思维模式，尝试逆向思考或者类比思维等非传统方法，激发创新思考，从而创造问题。",
    7: "设身处地模拟不同的利益相关者，通过多维度视角审视任务需求，从而从多个角度创造问题。",
    8: "借助有限资源的限制，开展问题构建，以此夯实问题的复杂度，同时检验在稀缺资源环境中解决问题的效能。",
    9: "借鉴历史经验和案例，映射到现代环境，推陈出新地提出问题，以历史对比凸显问题的独特性。",
    10: "将一般问题分解为微观细节，从微小的元素中寻求新的观点，以微观洞察点推动问题生成的创新。",
    11: "创设极端边界条件或情境，审视问题在多样环境中的蜕变，由此洞悉问题在变革中孕育的全新视觉角度。",
    12: "利用数字工具和数据驱动方法，根据已有数据模式打造问题，使问题构建更富有数据支持与科学性。",
    13: "考虑文化和地域多样性，以多元文化视角引发问题，将跨文化的独特需求融入问题生成过程。",
    14: "基于当下社会和技术趋势，预测未来可能的难题，从中激发问题构建，使之紧贴未来挑战。",
    15: "将个别案例与普遍规律结合，双重视角问题构建，以全局与局部的视角呈现问题情境。",
    16: "借助伦理和哲学的镜头，深入探索问题中潜藏的道德和价值观议题，从道德的高地俯瞰问题，以此丰富问题构建的深远意义。",
    17: "通过模拟随机而不可预测的事件，引入一种探究态度，考量这些因素如何在问题背景中引发连锁影响，从而塑造全新的问题视角。",
    18: "审视问题的短期和长期影响，将紧急性与重要性区分，以时间维度丰富问题生成。",
    19: "融合竞争与合作策略，考虑不同团队动态下问题的形成与解决，以团队视角丰富问题构建。",
    20: "汇集个体经验和情感，从人类内在驱动和情感需求出发，引发问题，使之更具情感共鸣与深度思考。",
    21: "运用数学中的复杂模型和方程，将问题转化为数学形式，通过解析、数值模拟或符号推演，深入探讨其内在特性和解空间。",
    22: "在编程领域引入算法复杂性分析，设计高效的解决方案，考虑时间复杂度、空间复杂度等因素，从而为问题提供更全面的视角。",
    23: "从哲学的角度探讨问题的本质，引入伦理、道德、存在等深刻层面，将问题置于更广阔的人类思考框架中，拓展问题的深度。",
    24: "将问题置于相对论和量子力学等物理理论的背景下，考虑时间扭曲、空间弯曲等概念，从而构建具有时空扭曲特性的复杂问题情境。",
    25: "引入信息论中的熵、压缩性等概念，从信息的角度审视问题，思考信息的丢失、传递和增益如何影响问题的建立和解决。",
    26: "运用心理学和认知科学的原理，深入分析人类思维的局限性和模式，设计能够突破传统思维壁垒的问题，激发创新思考。",
    27: "考虑社会文化的影响，将问题置于不同文化背景下解读，思考文化差异如何影响问题定义和解决方案的选择。",
    28: "结合经济学的资源分配理论，构建具有稀缺性资源的问题情境，探讨资源分配对解决方案的影响，从而增加问题的实际复杂度。",
    29: "运用生物学中的进化理论，设计涉及竞争、适应性和生存的复杂问题，从中汲取生物界的智慧，赋予问题更多层面的含义。",
    30: "将艺术与问题生成相结合，通过视觉、听觉等艺术形式表达问题，引发感性思考，并在美学的引导下探讨问题的意义和解决路径。",
    31:"在数学领域，引入拓扑学的概念，将问题的形态与结构进行抽象，探讨其在不同拓扑空间下的性质变化，从而揭示问题背后更深层次的关联。",
    32:"在编程中融入并行计算和分布式系统的思想，处理问题时考虑多线程、多节点间的交互与同步，以更贴近实际复杂计算环境的方式解决问题。",
    33:"从哲学角度运用存在主义的观点，探讨问题背后的意义与存在感，思考人类在面对问题时的选择、责任以及对解决方案的不同解读。",
    34:"将问题置于量子场论的框架下，考虑场的涨落和粒子的虚实状态，探讨问题的解在量子层面上可能存在的多重状态和相干性，进一步丰富问题的解释。",
    35:"运用群论与对称性原理，将问题中的元素与操作抽象为群的生成元与变换，从而研究问题在对称变换下的不变性，揭示问题隐含的对称关系。",
    36:"在编程领域引入机器学习与神经网络，让程序通过学习和迭代优化来逐步演化解决方案，从而模拟人类类似试错的智能思维过程，进一步提升问题解决的复杂性。",
    37:"从社会契约论的哲学观出发，探讨问题涉及的各方利益和权利，思考背后可能存在的合作与冲突，以及通过博弈论来建模不同利益主体间的策略选择。",
    38:"将问题置于熵增、热力学第二定律的视角下，考虑系统的混沌性质与有序演化，探讨问题可能涉及的不可逆过程，从而为问题的复杂性增添更多维度。",
    39:"将问题嵌入到多维宇宙的假设中，考虑不同宇宙规则和常数，探讨问题在不同宇宙条件下的变化，从哲学和物理的角度思考问题的本质。",
    40:"从存在主义的角度审视问题，将问题置于人类存在的意义和目的中，思考问题如何与人类的存在体验和价值观相互作用，引发深刻的思考。",
    41:"从神话学和宗教哲学的角度，探讨问题与人类信仰体系的关系，思考神秘主义、宿命论等元素如何影响对问题的看待和解决。",
    42:"引入跨文化心理学的观点，研究不同文化背景下个体与群体的关系，思考集体主义、个人主义等文化因素对问题分析和解决的影响。",
    43:"通过精心挖掘泛泛的需求，剖析出其中的关键元素，并在实际操作中将其转化为一系列独特而具体的任务，每个任务都承载着特定的目标和创新性的解决方案。",
    44:"从微观到宏观的层面思考问题，需要深入到每个细节背后的原因和影响，同时将这些细节置于整体架构中，以描绘出一个更为全面的图景。这个过程类似于分子生物学中的基因组学，从基础碱基到基因、染色体，再到整个基因组的互动，揭示生命的奥秘。",
    45:"超越传统思维的边界，我们可以将不同学科的知识融合起来，比如将数学的抽象思维与文学的想象力相结合，运用物理学的模型来解释社会现象。此外，可以借鉴生态系统的概念，将问题看作是一个相互关联的网络，通过调整一个领域的变化来影响其他领域，从而展开一场前所未有的综合性探索。",
    46:"在解决复杂问题时，引入逆向工程的思想，从问题的最终状态出发，逐步逆推回初始状态。这种方法类似于拼图游戏，通过观察完整的图案，然后逐块构建，直到达到问题的解决方案。",
    47:"运用认知心理学中的'分解-重组'策略，将复杂任务分解成更小的子任务，然后重新组合它们以形成整体解决方案。这就像是将一本书分割成章节和段落，然后重新编排它们，产生一个全新的故事情节。",
    48:"借鉴音乐创作的灵感，将问题视为一个主题，然后在其基础上进行变奏。通过改变问题的角度、元素的排列和关系的强调，可以得到不同的解决方案，就像音乐家通过改变音调、节奏和和声来演绎一首歌曲。",
    49:"采用类比思维，将一个领域中的概念和解决方案应用到另一个领域。就像画家可以通过观察自然界中的色彩变化来丰富绘画的调色板一样，我们可以从自然界、艺术、运动等领域中汲取灵感，为问题寻找创新的解决途径。",
    50:"引入随机性和变化，像演化生物学中的自然选择一样，让解决方案在一系列的'突变'和'选择'中不断进化。这种方法可以带来意想不到的结果，就像自然界中的进化会产生新的物种和特征一样。",
    51:"运用博弈论的思想，将问题看作是多方利益相关者之间的博弈。通过分析各方的策略、动机和可能的行动，可以找到一种平衡点，类似于国际关系中的外交协商。",
    52:"利用信息科学的原理，将问题抽象成信息流和处理过程。通过优化信息传递、存储和处理的方式，可以提高问题解决的效率，就像优化计算机程序的算法一样。",
    53:"将问题放入时间的长河中，观察其演变轨迹。类似于地质学家通过研究地层来了解地球历史，我们可以通过分析问题的历史演变和未来趋势，洞察问题的本质和可能的发展方向。",
    54:"运用社会学的视角，将问题放入社会和文化的背景中。分析社会群体、价值观念和制度的影响，可以更深刻地理解问题产生的根源，并探索与之相适应的创新解决方案。",
    55:"引入哲学的思考方式，对问题的本质、存在意义和价值进行深入探讨。通过审视问题的基本假设和逻辑，可以拓展思维的边界，从而找到更富有洞察力的解决方案。",
    56:"在追求更深入的思考过程时，不仅要运用逻辑推理，还要借鉴心理学的认知模式，通过情景模拟和情感联结，从而将问题置于多维度情境中进行探讨，以揭示更多层面的见解和潜在影响。",
    57:"不满足于简单的时间和空间安排，我们应该设定更高的复杂度标准，例如引入时间的不确定性和空间的多样性，以及交叉任务的并行执行，从而将问题的挑战性提升到一个新的高度，鼓励创新的解决方案的涌现。",
    58: "运用数学的抽象思维，将问题转化为数学模型和方程式。通过建立适当的数学关系，可以更精确地描述问题的特性和关联，从而为问题的分析和解决提供更有力的工具。数学的严密性能够帮助我们揭示问题背后的隐藏规律和结构。",
    59: "结合编程技巧，利用计算机的计算能力来处理问题。编写复杂的算法和程序，可以模拟问题的各种情境，进行大规模的数据处理和实验，甚至利用人工智能来寻找优化方案。编程的灵活性使得我们能够快速尝试不同的方法，并从实验中汲取经验。",
    60: "引入复杂性理论，将问题看作是由许多相互关联的部分组成的复杂系统。通过分析这些部分之间的相互作用和反馈机制，可以深入理解问题的整体行为。复杂性理论可以帮助我们识别问题的阶段性变化、临界点和突变，从而找到干预的契机。",
    61: "运用图论的思想，将问题抽象成节点和边的网络结构。节点代表问题中的元素，边代表它们之间的关系。通过分析网络的拓扑结构和连接模式，可以揭示问题的关键因素、影响力传播路径以及系统的稳定性。图论为问题的分析提供了直观而强大的工具。",
    62: "利用统计学和概率论，将问题中涉及的不确定性因素纳入考虑。通过收集数据、建立模型和进行推断，可以量化不确定性，并评估不同策略的风险和潜在回报。统计学的方法使得我们能够在不完全信息下做出明智的决策。",
    63: "融合多个学科的观点，创建交叉学科的团队来共同解决问题。数学、编程、复杂性科学等不同领域的专家可以汇集各自的知识和技能，形成创新的思维合成。这种跨学科合作可以打破传统思维框架，为问题带来全新的解决视角。",
    64: "运用优化理论，寻找问题的最佳解或最优解决方案。优化问题涉及在一定约束条件下最大化或最小化某个指标，这可以是成本、效益、效率等。通过数学建模和算法优化，我们可以探索各种可能的选择，并找到最优的决策路径。优化理论在诸多领域有着广泛的应用，从工程到经济，从资源分配到路径规划。",
    65: "引入随机性和混沌理论，考虑问题中的随机因素和非线性关系。有些问题的演化和行为可能受到随机事件的影响，而混沌理论则强调微小变化可能引起系统的巨大变化。通过随机模拟和混沌分析，我们可以更好地理解问题的演化趋势，甚至在看似无序的情况下找到一些规律。",
    66: "运用递归和分形思想，将问题分解为自相似的部分，从而揭示出问题的层次结构和重复特性。递归是指在解决一个问题的过程中不断地应用相同的操作，而分形则强调结构在不同尺度上的相似性。通过这些思想，我们可以更好地理解复杂问题的构成方式，并在不同层次上进行分析和解决。",
    67: "采用人工智能和机器学习技术，让计算机从数据中学习并自动改进问题的解决方法。机器学习算法可以识别模式、进行分类和预测，从大量数据中提取有价值的信息。通过训练模型，我们可以让计算机根据以往的经验来辅助决策和问题求解，甚至提出创新性的解决方案。",
    68: "引入时序分析，考虑问题随时间变化的特性。许多问题的关键在于理解事件和因果关系是如何随着时间推移而演变的。时序分析可以揭示出趋势、周期性行为、突发事件等，帮助我们预测未来的发展趋势并采取相应的应对策略。",
    69: "运用群体动力学模型，研究个体之间的相互作用如何影响整体系统的行为。群体动力学关注个体的决策如何在集体层面产生复杂的结果。通过建立模型，我们可以探索信息传播、疾病传播、社会演化等问题，深入了解个体行为对整体的影响。",
    70: "最终，将优化理论，随机性和混沌理论，递归和分形思想，人工智能和机器学习技术，时序分析，群体动力学模型，所有这些方法和思想融汇贯通，形成一种综合性的问题求解策略。不同的问题可能在不同的阶段需要不同的工具和观点，因此灵活地结合多种方法可以更全面地理解问题，并找到切实可行的解决方案。这种综合性的思维方式能够应对问题的多样性和复杂性，从而推动问题解决的前沿。",
    71: "引入信息论和复杂网络分析，探究问题中的信息传递和系统结构。信息论研究信息的量和传递，可以帮助我们理解在不确定性和噪声存在的情况下如何有效地传递关键信息。复杂网络分析则关注系统中各个元素之间的关系，从而揭示出网络的特性、脆弱性以及信息流动的路径。将这些理论融入问题求解中，可以更好地优化信息传递和系统结构，提升解决方案的稳定性和可靠性。",
    72: "运用博弈论，研究决策参与者之间的策略选择及其影响。博弈论可以帮助我们分析多方参与的决策过程，预测不同策略下可能的结果，并寻找最佳的决策策略。在复杂化的问题中，涉及多个利益相关者的冲突与合作，博弈论为我们提供了一种深入理解决策动态的方式，从而在竞争与合作中找到平衡点。",
    73: "引入模糊逻辑和神经网络，处理问题中的不确定性和模糊性。模糊逻辑可以应对信息不完全和模糊定义的情况，使得问题的求解在更广泛的条件下成为可能。神经网络则模仿人脑神经元之间的连接方式，通过学习和训练来识别模式和关联，从而处理复杂的输入数据。将这两者结合运用，可以更好地应对真实世界问题中的模糊和非线性特性。",
    74: "运用量子计算思想，探索问题的并行处理和态的叠加性质。量子计算利用量子比特的叠加和纠缠特性，在某些情况下能够实现比传统计算更快的问题求解。尽管目前量子计算还处于发展阶段，但在未来，它可能成为解决复杂问题的一种创新途径，特别是涉及大量数据和复杂计算的领域。",
    75: "综合运用信息论和复杂网络分析，博弈论，模糊逻辑和神经网络，量子计算思想，这些方法和思想，我们可以在解决问题时更全面地考虑问题的多个方面，从不同角度深入分析，找到更为精准和可行的解决方案。这种跨学科的综合性方法能够应对问题的多样性和复杂性，推动问题求解向更深层次和广度发展。",
    76: "融合拓扑学和动力系统的概念，研究问题的稳定性和演变趋势。拓扑学关注空间的性质和结构，而动力系统则研究随时间变化的系统的行为。应用这两个理论，可以帮助我们更好地理解和预测问题中涉及的复杂系统的演变和稳定性，特别是在面临突变和不稳定因素时。",
    77: "采用组合优化和启发式搜索，为问题提供更多元化和高效的求解策略。组合优化关注在有限的解空间中寻找最优解，而启发式搜索通过经验和直觉来引导搜索过程，提高求解效率。结合这两种方法，我们可以针对复杂问题设计出更具创新性和灵活性的解决策略。",
    78: "引入深度学习和自适应算法，实现问题中的自动化和智能化处理。深度学习可以模拟复杂的数据模型和结构，自适应算法则能够在问题求解过程中不断调整和优化策略。利用这些技术，可以使问题解决方案在面临不同环境和变数时，持续迭代和进化，以达到最优。",
    79: "结合群体智能和进化算法，模拟自然界中的优化和适应性机制。群体智能如蚁群算法、鸟群算法等，模拟自然界生物的集体行为，为问题求解提供多样的策略。进化算法则模拟生物进化的原理，通过选择、交叉和变异来寻找最佳解。这些方法可以在复杂的搜索空间中找到更为合适的路径和策略。",
    80: "结合拓扑学和动力系统,组合优化和启发式搜索,深度学习和自适应算法,群体智能和进化算法,上述所有理论和方法，形成一种多学科、多视角、多层次的综合问题求解框架。不仅要注重问题的深度挖掘，还要注重广度拓展，确保在面对各种复杂情境时，都能灵活适应，创新求解。此外，要不断地更新和迭代方法，以适应日益增长的问题复杂度和多样性。",

    82: "结合演化计算和神经进化，研究问题的自动优化和创新。演化计算以生物进化理论为基础，通过遗传算法等方法来优化问题解，而神经进化则结合神经网络和演化算法，实现对复杂系统的优化和创新。这种结合可以在问题求解过程中实现更高层次的自动化和智能化。",
    83: "采用形式化方法和模型验证，确保问题解决方案的正确性和可靠性。形式化方法通过数学和逻辑的手段来建立问题模型，然后通过模型验证来检验解决方案是否满足特定的性质和要求。在处理复杂问题时，确保解决方案的正确性至关重要，可以避免潜在的错误和风险。",
    84: "引入人工智能和自动化技术，实现问题求解的智能辅助和自动化执行。人工智能技术如机器学习和自然语言处理可以从大量数据中学习模式和规律，辅助人们做出更明智的决策。自动化技术则可以使问题解决方案的执行更加高效和精确，减少人为误差。",
    85: "探索量子机器学习的潜力，将量子计算和机器学习相结合，处理复杂数据和模式识别。量子机器学习利用量子计算的优势来加速机器学习算法的执行，从而在处理大规模和高维度数据时取得更好的效果。这种交叉领域的应用有望在人工智能领域带来革命性的变革。",
    86: "将情感计算和人机交互引入问题求解过程，考虑人类情感和需求。情感计算关注人类情感的识别和模拟，可以帮助我们更好地理解问题背后的人类因素。同时，设计人机交互界面时考虑用户的情感和体验，可以使解决方案更加贴近用户的实际需求。",
    87: "采用分布式计算和边缘计算，处理问题中涉及大量数据和实时性要求的情况。分布式计算通过将计算任务分配到多个计算节点上，实现高效的并行处理。而边缘计算则将部分计算任务移至数据产生的地方，降低数据传输延迟。在处理涉及大数据和实时性的复杂问题时，这些技术能够提供更好的性能。",
    88: "引入虚拟现实和增强现实技术，为问题建立直观的可视化和交互界面。虚拟现实技术可以创建沉浸式的虚拟环境，增强现实技术则将虚拟元素叠加在真实世界中。这些技术可以帮助我们更好地理解问题的复杂性，同时为解决方案的探索和优化提供直观的工具。",
    89: "运用生物计算和量子生物学原理，从生物体系中获取灵感，优化问题求解方法。生物计算模仿生物体系的结构和行为，寻找问题的解决方案。量子生物学原理则探索生物体内量子效应的可能应用。这些跨足生命科学领域的方法可以为问题求解带来新的启示和创新。",
    90: "不断追求跨学科合作和知识融合，将不同领域的专业知识相互结合，形成更具创新力的解决方案。复杂问题往往涉及多个学科的知识，跨学科合作可以丰富问题的视角，促进知识的交流和融合。通过将不同领域的思想和方法相结合，我们可以找到更全面和高效的问题求解途径。",
    91: "运用随机性和蒙特卡洛方法，处理问题中的不确定性和随机因素。蒙特卡洛方法通过随机抽样来估计问题的解，尤其在涉及概率和统计的复杂问题中表现出色。通过引入随机性，我们可以更好地模拟真实世界中的随机变化，从而得到更全面和准确的问题解决方案。",
    92. :"**数学问题：**指令：将常规的数学问题改造，赋予其独特特色。",
    93. :"**Python编程问题：**指令：通过深入思考问题，引入更多复杂的逻辑推演步骤，创造探究性问题。",
    94. :"**数学问题：**指令：引入更为复杂的时间和空间元素，带来高挑战性的问题。",
    95. :"**Python编程问题：**指令：以多个视角和角度，创造问题，呈现丰富的思维层面。",
    96. :"**数学问题：**指令：将不同领域的知识融汇贯通，将问题生成与多元领域的智识相融合。",
    97. :"**Python编程问题：**指令：挑战传统思维模式，尝试非传统方法，激发创新思考，创造问题。",
    98. :"**数学问题：**指令：设身处地模拟不同利益相关者，从多维度创造问题。",
    99.: "**Python编程问题：**指令：借助有限资源的限制，夯实问题复杂度，检验在稀缺资源环境中解决问题的效能。",
    100.: "**数学问题：**指令：借鉴历史经验和案例，推陈出新地提出问题，凸显问题的独特性。",
    101. :"**Python编程问题：**指令：将一般问题分解为微观细节，从微小的元素中寻求新的观点，推动问题生成的创新。",
    102.: "**数学问题：**指令：将难以捉摸的抽象概念与现实世界场景相连接，创造出令人惊叹的问题。",
    103.: "**Python编程问题：**指令：设计一个复杂的虚拟环境，要求编写程序模拟其中的多个相互影响的因素。",
    104.: "**数学问题：**指令：引入哲学思考，探讨数学与宇宙本质之间可能存在的联系，提出充满启发的问题。",
    105.: "**Python编程问题：**指令：结合艺术创作，要求使用代码生成令人愉悦同时又具有挑战性的艺术品。",
    106.: "**数学问题：**指令：以逆向思维方式，从问题的解出发逆推问题的提出，锻炼学生的逻辑逆向能力。",
    107.: "**Python编程问题：**指令：创建一个模拟进化环境，探索在不同遗传策略下哪种策略能在资源竞争中脱颖而出。",
    108.: "**数学问题：**指令：运用超越常规数学范畴的数学概念，构建一个新颖且富有挑战的问题。",
    109.: "**Python编程问题：**指令：从生物学、化学或物理学等其他科学领域汲取灵感，创造一个跨学科问题。",
    110.: "**数学问题：**指令：以社会科学的视角，提出一个能够解释现实社会现象的数学模型，并找出其局限性。",
    111.: "**Python编程问题：**指令：通过引入随机性和不确定性，设计一个模拟预测未来的复杂系统。",
    112.: "**数学问题：**指令：从几何学、代数学、概率论和数理统计等领域，选取关键概念，构建一个交叉领域问题。",
    113.: "**Python编程问题：**指令：编写一个人工智能程序，使其能够分析文本并提出富有深度的哲学问题。",
    114.: "**数学问题：**指令：以可视化为手段，探索复杂多维数据集中隐藏的模式，并提出解释这些模式的数学理论。",
    115.: "**Python编程问题：**指令：设计一个多层次的加密迷宫，要求利用密码学知识解决其中的各个挑战。",
    116.: "**数学问题：**指令：构建一个需要运用多种证明方法（直接证明、反证法、数学归纳等）的数学问题序列。",
    117.: "**Python编程问题：**指令：模仿生物神经网络结构，设计一个能够自主学习和优化的程序系统。",
    118.: "**数学问题：**指令：利用图论中的复杂算法，探索社交网络中信息传播的路径和影响力。",
    119.: "**Python编程问题：**指令：创建一个模拟经济系统，考虑资源配置、市场供需等因素，并引入突发事件模拟。",
    120.: "**数学问题：**指令：思考时间旅行的逻辑，提出一个在时间连续性和因果律下仍成立的数学假设。",
    121.: "**Python编程问题：**指令：利用深度学习，设计一个可以自动生成复杂艺术作品的算法系统。"
}
requirements2 = {
    1. : "通过精心挖掘泛泛的需求，剖析出其中的关键元素，并在实际操作中将其转化为一系列独特而具体的任务，每个任务都承载着特定的目标和创新性的解决方案。",
    2. : "在追求更深入的思考过程时，不仅要运用逻辑推理，还要借鉴心理学的认知模式，通过情景模拟和情感联结，从而将问题置于多维度情境中进行探讨，以揭示更多层面的见解和潜在影响。",
    3. : "不满足于简单的时间和空间安排，我们应该设定更高的复杂度标准，例如引入时间的不确定性和空间的多样性，以及交叉任务的并行执行，从而将问题的挑战性提升到一个新的高度，鼓励创新的解决方案的涌现。",
    4. : "从微观到宏观的层面思考问题，需要深入到每个细节背后的原因和影响，同时将这些细节置于整体架构中，以描绘出一个更为全面的图景。这个过程类似于分子生物学中的基因组学，从基础碱基到基因、染色体，再到整个基因组的互动，揭示生命的奥秘。",
    5. : "超越传统思维的边界，我们可以将不同学科的知识融合起来，比如将数学的抽象思维与文学的想象力相结合，运用物理学的模型来解释社会现象。此外，可以借鉴生态系统的概念，将问题看作是一个相互关联的网络，通过调整一个领域的变化来影响其他领域，从而展开一场前所未有的综合性探索。",
    6. : "在解决复杂问题时，引入逆向工程的思想，从问题的最终状态出发，逐步逆推回初始状态。这种方法类似于拼图游戏，通过观察完整的图案，然后逐块构建，直到达到问题的解决方案。",
    7. : "运用认知心理学中的'分解-重组'策略，将复杂任务分解成更小的子任务，然后重新组合它们以形成整体解决方案。这就像是将一本书分割成章节和段落，然后重新编排它们，产生一个全新的故事情节。",
    8. : "借鉴音乐创作的灵感，将问题视为一个主题，然后在其基础上进行变奏。通过改变问题的角度、元素的排列和关系的强调，可以得到不同的解决方案，就像音乐家通过改变音调、节奏和和声来演绎一首歌曲。",
    9. : "采用类比思维，将一个领域中的概念和解决方案应用到另一个领域。就像画家可以通过观察自然界中的色彩变化来丰富绘画的调色板一样，我们可以从自然界、艺术、运动等领域中汲取灵感，为问题寻找创新的解决途径。",
    10.: "引入随机性和变化，像演化生物学中的自然选择一样，让解决方案在一系列的'突变'和'选择'中不断进化。这种方法可以带来意想不到的结果，就像自然界中的进化会产生新的物种和特征一样。",
    11. : "运用博弈论的思想，将问题看作是多方利益相关者之间的博弈。通过分析各方的策略、动机和可能的行动，可以找到一种平衡点，类似于国际关系中的外交协商。",
    12. : "利用信息科学的原理，将问题抽象成信息流和处理过程。通过优化信息传递、存储和处理的方式，可以提高问题解决的效率，就像优化计算机程序的算法一样。",
    13.: "将问题放入时间的长河中，观察其演变轨迹。类似于地质学家通过研究地层来了解地球历史，我们可以通过分析问题的历史演变和未来趋势，洞察问题的本质和可能的发展方向。",
    14.: "运用社会学的视角，将问题放入社会和文化的背景中。分析社会群体、价值观念和制度的影响，可以更深刻地理解问题产生的根源，并探索与之相适应的创新解决方案。",
    15.: "引入哲学的思考方式，对问题的本质、存在意义和价值进行深入探讨。通过审视问题的基本假设和逻辑，可以拓展思维的边界，从而找到更富有洞察力的解决方案。",
}





mistake=0
with tqdm(total=total_lines, desc="指令进度") as pbar:
    while pbar.n < total_lines:
        i=0
        sum_str = ""
        i+=1

        research_result = ""
        wenti = generate(f"""
要求生成一个问题，您可以使用但不限于以下方法来增加难度
方法:{random.choice(list(requirements.values()))}
问题:""")
        if wenti.find("<br>")!=-1:
            wenti=wenti.split("<br>")[0]
            print("修正して問題を訂正します：", wenti)
        while any(word in wenti for word in sensitive_words1) or len(wenti)<6 or len(wenti)>500:
            print(f"error\nreloop")
            for word in sensitive_words1:
                if word in wenti:
                    print(f"Found sensitive word: {word}")
            mistake+=1
            if mistake==3:
                break
            wenti = generate(f""" 
要求生成一个问题，您可以使用但不限于以下方法来增加难度
方法:{random.choice(list(requirements.values()))}
问题:""")
            if wenti.find("<br>") != -1:
                wenti = wenti.split("<br>")[0]
                print("修正して問題を訂正します：", wenti)
        if mistake == 3:
            mistake=0
            continue




        wenti=wenti.strip()
        print("検索を生成する...")
        query = generatequerycontext(wenti)
        if len(query) > 1 and len(query) < 50:
            try:
                print("検索する...")
                research_result = internet_research(query)  # ++++++
            except:
                print("検索エンジンの冷却中...")

        # if abs(st)>1 and abs(time.time()-st)<600:
        #     print("検索エンジンの冷却中...")
        # else:
        #     print("検索を生成する...")
        #     query = generatequerycontext(wenti)
        #     if len(query) > 1 and len(query) < 50:
        #         try:
        #             st=0
        #             research_result = internet_research(query)  # ++++++
        #         except:
        #             print("検索エンジンの冷却中...")
        #             st=time.time()
        if len(research_result)>1:
            research_result = extractcontext(research_result, wenti)




        print(f"検索完了\nresult:{research_result}")#此部分提供的信息只作为参考，不能确保是否有帮助，您可以使用但不限于这些内容:{research_result}
        result = generate(f"""指令:请尽可能的对问题做出最好的回答   
问题:{wenti}
分析:{research_result}
回答:""")
        while any(word in result for word in sensitive_words2) or len(result)<6:
            print(f"error\nreloop")
            for word in sensitive_words2:
                if word in result:
                    print(f"Found sensitive word: {word}")
            mistake += 1
            if mistake == 3:
                break
            result = generate(f"""
指令:请尽可能的对问题做出最好的回答   
问题:{wenti}
分析:{research_result}
回答:""")
        if mistake == 3:
            mistake=0
            continue

        rating=filterdata(f"问题:{wenti}\n"+f"分析:{research_result}\n"+f"回答:{result}\n")
        if rating>"3":
            json_data = {'instruction': f"问题:{wenti}", "input":f"分析:{research_result}", 'output':f"回答:{result}"}
            # 将数据写入文件
            print("情報を保存する")
            with open(filename, 'a', encoding='utf-8') as f:
                f.write(json.dumps(json_data, ensure_ascii=False) + '\n')
                rating = "0"

